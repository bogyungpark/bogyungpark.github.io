[
  
  {
    "title": null,
    "url": "/posts/2023-07-09-jekyll-theme/",
    "categories": "",
    "tags": "",
    "date": "2023-07-09 16:51:34 +0900",
    





    
    "snippet": "git blog initial setting이번 포스팅에서는 GitBlog 테마의 초기 설정에 관해 알려드리고자 합니다. GitBlog는 Git 저장소를 기반으로 동작하는 간단하고 가벼운 정적 블로그 플랫폼입니다.깃블로그의 장점이 커스터마이징을 할 수 있다는 것이지만, 깃블로그 테마를 설정하는 과정에서 어려움이 있을 수 있는 부분을 중점으로 포스팅 하...",
    "content": "git blog initial setting이번 포스팅에서는 GitBlog 테마의 초기 설정에 관해 알려드리고자 합니다. GitBlog는 Git 저장소를 기반으로 동작하는 간단하고 가벼운 정적 블로그 플랫폼입니다.깃블로그의 장점이 커스터마이징을 할 수 있다는 것이지만, 깃블로그 테마를 설정하는 과정에서 어려움이 있을 수 있는 부분을 중점으로 포스팅 하였습니다.mac os 기준으로 포스팅하였습니다.우선 jekyll의 테마를 사용할 것이기 때문에 이에 관련된 것들을 설치해야합니다. 공식 Document가 설명이 워낙 잘나온지라 jekyll 설치를 참고하여 설치하시면 됩니다.jekyll theme 고르기여러 사이트가 있지만, 저는 jekyll theme 사이트에서 Chirpy theme를 선택하였습니다.이유는 가장 깔끔하고 가독성이 높아보여, 저의 취향에 맞았기 때문입니다.공식 Document 또한 설명이 굉장히 잘 나와있습니다.Chirpy github의 Fork를 사용하여 소스를 내가 생성한 저장소로 fork 받습니다.github의 기본 도메인을 사용할 때는 .github.io 형식으로 만들어야 합니다. 저의 경우, 이미 생성되어 있어서 경고창이 뜨네요.클론 받기먼저 cd 주소를 통해 다운받기 원하는 폴더에 진입합니다. 그 후 아래 명령을 통해 소스를 받습니다.$ git clone https://github.com/[username]/[username].github.io.gitchirpy 초기화 하기아래 명령을 사용하여 chirpy를 초기화 합니다.tools/init.sh이때, [INFO] Initialization successful! 이런 명령어가 나오면 성공입니다.위의 명령어가 성공하면 다음 파일들이 삭제됩니다.  아래 파일과 디렉토리 삭제          .travis.yml      _posts 아래의 파일들      .github/workflows/pages-deploy.yml.hook에서 .hook 삭제하고 이를 제외한 .github내 다른 폴더와 파일들 삭제        Gemfile.lock을 .gitignore에서 삭제  변경을 저장하기 위해 자동적으로 commit 생성dependency 설치우선 jekyll을 로컬에서 실행시키기 위해 루트 디렉토리로 이동하여 아래 명령어를 통해 의존성을 설치합니다.이미 chirpy에 기본설정이 되어 있기 때문에 아래 명령만으로 필요한 모든 것이 설치됩니다.bundle로컬에서 실행해 보기원격으로 올리기 전에 실시간으로 먼저 보고 싶다면 아래 명령어를 실행한다.bundle exec jekyll serve고 http://127.0.0.1:4000 으로 들어가본다. 기본 사이트가 잘 나온다면 우선 성공입니다.chirpy 환경 둘러보기  _config.yml : 블로그의 기본 설정 파일입니다.  _data : 왼쪽 사이드바와 포스트 하단의 공유하기 버튼등의 구성을 변경할 수 있습니다.  _include : 사이드바, toc, 구글애널리틱스, footer, 댓글 등의 대부분의 모듈형으로 삽입되는 UI를 변경할 수 있습니다  _layout : 블로그 전역에 적용되는 기본 형식, 카테고리, 포스트 등에 적용되는 형식등을 변경할 수 있습니다.  _posts : 내가 작성한 블로그 글을 저장해 두는 곳입니다.  image : 이미지 파일을 저장하기 위해 직접 폴더를 생성하였습니다.  _sass : css 파일을 커스터마이징 할 수 있습니다.  _site : 로컬에서 실행할 때, 화면 UI를 구성하는 모든 내용이 들어 있습니다.  _tabs : 왼쪽 사이드바의 기본 탭메뉴들에 대한 랜딩페이지가 들어 있습니다.  assets : css, img등이 있습니다.  tools : 자동 배포를 위한 코드가 들어 있습니다. (건들지 않는 것이 좋습니다.)그 다음은 _config.yml 수정을 해야합니다.            항목      값      설명                  lang      ko      언어를 한글로 설정.              timezone      Asia/Seoul      서울 표준시              title      블로그제목      블로그 제목              tagline      부연설명      title 아래 부연설명              description      키워드      SEO를 위한 키워드              url      https://bogyungpark.github.io      내 블로그로 실제 접속할 url을 입력              github      github id      본인의 github 아이디를 입력              twitter.username      twitter id      트위터 아이디              social.name      이름      포스트 등에 표시할 나의 이름              social.email      이메일      나의 이메일 계정              social.links      소셜 링크들      트위터, 페이스등 내가 사용하고 있는 소셜 서비스의 나의 홈 url을 입력              theme_mode      light or dark      원하는 테마 스킨을 선택              avatar      이미지 경로      블로그 왼쪽 상단에 표시될 나의 아바타 이미지를 설정              toc      true      포스팅된 글의 오른쪽에 목차를 표시              paginate      10      한 목록에 몇개의 글을 표시해 줄 것인지 선택      포스팅하기_post 디렉토리에 작성한 파일을 넣습니다.글을 작성한 후 파일명은 아래 규칙과 같이 설정합니다.형식 : yyyy-mm-dd-제목.md년 4자리, 월 2자리, 일 2자리와 제목을 넣어줍니다.확장자는 .md 또는 .markdown으로 합니다.중간에 공백을 넣지 않습니다. 공백이 필요하면 -로 바꿉니다."
  },
  
  {
    "title": null,
    "url": "/posts/2023-07-07-GPU-setting/",
    "categories": "",
    "tags": "",
    "date": "2023-07-09 16:51:34 +0900",
    





    
    "snippet": "Ubuntu initial SettingsDriver installation  그래픽카드 정보 및 드라이버 확인하기    $ ubuntu-drivers devices            드라이버 설치          권장 드라이버 자동으로 설치          $ sudo ubuntu-drivers autoinstall   $ sudo reboot  ...",
    "content": "Ubuntu initial SettingsDriver installation  그래픽카드 정보 및 드라이버 확인하기    $ ubuntu-drivers devices            드라이버 설치          권장 드라이버 자동으로 설치          $ sudo ubuntu-drivers autoinstall   $ sudo reboot                    원하는 버전 수동으로 설치         $ sudo apt install nvidia-driver-470  $ sudo reboot                    Monitoring GPU usage.    $ nvidia-smi      Driver version    : 현재 설치돼 있는 nvidia driver version        CUDA Version    : 현재 드라이버 버전과 맞는 cuda 추천 버전        GPU/FAN    : 설치되어 있는 GPU number: Fan이 있는 RTX 모델        Name    : GeForce RTX 3090        Temp    : GeForce RTX 3090 모델        Perf (Performance)    : P0 - P12 까지 존재하며, P0에 가까울수록 GPU의 Performance가 높다        Persistence-M    : Power 지속성 옵션은 on/off 두 가지 모드가 존재하며, Default 값은 off이다. on 상태가 되면 power limit을 설정할 수 있다.        Pwr: Usage/Cap    : 현재 전력 사용량과 최대 용량        Bus-Id    : 서버 제조사의 메인보드마다 가지고 있는 PCI slot에 부여된 BUS-ID 사용하는 GPU number와 메인보드의 PCI 슬롯을 매칭 시켜 확인할 수 있다.        Disp.A    : RTX나 Quadro계열의 GPU에서 사용. 모니터를 연결한 출력 포트의 GPU는 on상태로 변경이 된다.        Memory-Usage    : 현재 사용하는 GPU 메모리 / 총 GPU 메모리        Voltaile GPU-Util    : GPU의 총사용량        Uncorr. ECC    :** default값은 ECC ON 상태이며, ECC count가 생기면 숫자 0이 1,2.. 이상으로 변경        Compute M.    : Compute Mode의 모드    0 - default  1 - exclusive_thread  2 - prohibited  3 - exclusive_process        MIG M    : MIG는 GPU를 Slice 하는 기능        Processes    : GPU가 작업을 시작하면 No running processes found에 PID에 표기  CUDA Toolkit InstallThe driver and toolkit must be installed for CUDA to function. If you have not installed a stand-alone driver, install the driver from the NVIDIA CUDA Toolkit.→ 쿠다를 실행하기 위해서는 driver와 toolkit가 깔려 있어야 한다. 단독 Nvidia driver를 깔지 않았다면, CUDA Toolkit을 통해 깔도록 한다.CUDA Toolkit Archive사이트와 Cudnn 설치 URL를 통해 설치할 수 있다.  CUDA Toolkit 설치 URL에 들어가 환경에 맞는 버전을 선택  Base Installer에 있는 명령어들을 차례로 입력하여 설치$ wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin$ sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600$ wget https://developer.download.nvidia.com/compute/cuda/12.2.0/local_installers/cuda-repo-ubuntu2004-12-2-local_12.2.0-535.54.03-1_amd64.deb$ sudo dpkg -i cuda-repo-ubuntu2004-12-2-local_12.2.0-535.54.03-1_amd64.deb$ sudo cp /var/cuda-repo-ubuntu2004-12-2-local/cuda-*-keyring.gpg /usr/share/keyrings/$ sudo apt-get update$ sudo apt-get -y install cuda$ sudo apt update$ sudo apt install nvidia-cuda-toolkit$ nvcc -VPytorch GPU InstallPyTorch Get start에 접속한다.$ conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidiaPytorch GPU 사용 가능 여부 확인import torchprint(torch.cuda.is_available())GPU 사용 가능 -&gt; True, GPU 사용 불가 -&gt; False"
  }
  
]

